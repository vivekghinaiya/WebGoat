trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONAR_PROJECT_KEY: 'WebGoat'
  SONAR_PROJECT_NAME: 'WebGoat'
  SONAR_HOST_URL: 'http://103.238.15.202:9000'
  SONAR_TOKEN: $(SONARQUBE_TOKEN)

steps:

# ------------------------------------
# Install Java 23 manually
# ------------------------------------
- script: |
    echo "Downloading OpenJDK 23..."
    curl -L -o openjdk-23_linux-x64_bin.tar.gz https://download.java.net/java/early_access/jdk23/11/GPL/openjdk-23-ea+11_linux-x64_bin.tar.gz

    echo "Extracting JDK..."
    mkdir -p /opt/jdk
    tar -xzf openjdk-23_linux-x64_bin.tar.gz -C /opt/jdk

    echo "Setting JAVA_HOME and updating PATH..."
    export JAVA_HOME=/opt/jdk/jdk-23
    export PATH=$JAVA_HOME/bin:$PATH

    echo "Java version:"
    java -version
  displayName: 'Manually Install and Configure Java 23'

# ------------------------------------
# SonarQube Analysis Preparation
# ------------------------------------
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQube-Local'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(SONAR_PROJECT_KEY)'
    cliProjectName: '$(SONAR_PROJECT_NAME)'
    extraProperties: |
      sonar.host.url=$(SONAR_HOST_URL)
      sonar.sources=.
      sonar.java.binaries=.

# ------------------------------------
# Build WebGoat with Java 23
# ------------------------------------
- script: |
    export JAVA_HOME=/opt/jdk/jdk-23
    export PATH=$JAVA_HOME/bin:$PATH
    mvn clean compile
  displayName: 'Build WebGoat with JDK 23'

# ------------------------------------
# SonarQube Analysis
# ------------------------------------
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Results'

# ------------------------------------
# Gitleaks: Secret Detection
# ------------------------------------
- script: |
    echo "Installing Gitleaks..."
    curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
    chmod +x gitleaks
    ./gitleaks detect --source . --report-format sarif --report-path gitleaks.sarif --exit-code 1 || echo "Gitleaks found secrets."
  displayName: 'Run Gitleaks Secret Scan'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'gitleaks.sarif'
    ArtifactName: 'gitleaks-report'

# ------------------------------------
# Microsoft Security DevOps
#